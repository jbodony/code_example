{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 * {{ node.field_biography.value|striptags('<fn>,<a>')|raw }}
 */
#}
{%
  set classes = [
    node.bundle|clean_class,
    node.isPromoted() ? 'is-promoted',
    node.isSticky() ? 'is-sticky',
    not node.isPublished() ? 'is-unpublished',
    view_mode ? view_mode|clean_class,
    'clearfix',
  ]
%}
<article{{ attributes.addClass(classes) }}>

  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
    <footer>
      {{ author_picture }}
      <div{{ author_attributes.addClass('author') }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %}

  <div{{ content_attributes.addClass('content') }}>
    {# {{ content }} #}

    {# get addresses #}
    {% set addresses = [] %}

    {% for f_address in hop.field_address %}

      {% set address = [] %}
      {% if f_address.field_address_type.0.value is not empty %}   {% set address = address|merge([f_address.field_address_type.0.value]) %} {% endif %}
      {% if f_address.field_address_house_name.0.value is not empty %}   {% set address = address|merge([f_address.field_address_house_name.0.value]) %} {% endif %}
      {% set place = [] %}
      {% if f_address.field_address_town.0.value is not empty %}   {% set place = place|merge([f_address.field_address_town.0.value]) %} {% endif %}
      {% if f_address.field_address_county.0.value is not empty %}   {% set place = place|merge([f_address.field_address_county.0.value]) %} {% endif %}
      {% if f_address.field_address_country.0.value is not empty %}   {% set place = place|merge([f_address.field_address_country.0.value]) %} {% endif %}
      {% set address = address|merge([place|join(', ')]) %} 
      {% set addresses = addresses|merge([address|join(' ')]) %} 

    {% endfor %}

    {# get alternative surnames #}
    {% set altsurnames_by_type = {} %}

    {% for f_altsurnames in hop.field_alternative_surname %}
      {% if f_altsurnames.field_as_alias_type.0.value is not empty %}  
        {% set aliastype = f_altsurnames.field_as_alias_type.0.value %}
        {% set temp = "" %}
        {% if altsurnames_by_type[aliastype] is not empty %} 
          {% set temp = altsurnames_by_type[aliastype] %} 
          {% set altsurnames_by_type = altsurnames_by_type|merge({(f_altsurnames.field_as_alias_type.0.value):(temp ~ ', ' ~ f_altsurnames.field_as_alternative_surname.0.value)}) %}
        {% else %}
          {% set altsurnames_by_type = altsurnames_by_type|merge({(f_altsurnames.field_as_alias_type.0.value):(f_altsurnames.field_as_alternative_surname.0.value)}) %}
        {% endif %}	
      {% endif %}
    {% endfor %}


    {% set names = [] %}
    {% if node.field_surname.value is not empty %} {% set names = names|merge([["<strong>",node.field_surname.value|upper,"</strong>"]|join("")]) %} {% endif %}
    {% if node.field_title_before_name.value is not empty %} {% set names = names|merge([node.field_title_before_name.value]) %} {% endif %}
    {% for key,val in altsurnames_by_type  %}
      {% if key != "variant spelling" %}
        {%  set names = names|merge(['(<i>' ~ key|capitalize  ~ '</i>: ' ~ val ~ ')']) %}
      {% endif %}
    {% endfor %}
    {% set fornames_dates = [] %}
    {% if node.field_forename.value is not empty %} {% set fornames_dates = fornames_dates|merge([["<strong>",node.field_forename.value,"</strong>"]|join("")]) %} {% endif %}
    {% if node.field_dob_dod_text.value is not empty %} {% set fornames_dates = fornames_dates|merge([["(",node.field_dob_dod_text.value,")"]|join("")]) %} {% endif %}
    {% if fornames_dates is not empty %} {% set names = names|merge([fornames_dates|join(' ')]) %} {% endif %}
    {% set names = names|merge([addresses|join('; ')]) %}

    {#  Presentation #}

    <p>{{ names|join(', ')|raw }}.</p>
    {# Alternative surnames	#} 
    <p>
      {% for key,val in altsurnames_by_type  %}
        {% if key == "variant spelling" %}
          <strong>{{ key|capitalize }}</strong>: {{ val }}
        {% endif %}	
      {% endfor %}
    </p>
    <p>{{ hop.fn.fn_constituency|raw }}</p>
    <p>{{ hop.fn.fn_family|raw }}</p>
    <p>{{ hop.fn.fn_career|raw }}</p> 
    <p>{{ hop.fn.fn_other|raw }}</p>
    <p>{{ hop.fn.fn_biography|raw }}</p>
    <p>{{ hop.fn.fn_footnotes|raw }}</p>
    <p>{{ hop.author|raw }}</p>



  </div>

</article>

